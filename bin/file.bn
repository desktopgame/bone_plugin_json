_open := extern_def("file.fopen", ["path", "mode"], ["ret", "error"]);
putc := extern_def("file.fputc", ["self", "c"], ["error"]);
getc := extern_def("file.fgetc", ["self"], ["ret", "error"]);
close := extern_def("file.fclose", ["self"], []);
stdout := extern_var("file.stdout");
stderr := extern_var("file.stderr");
stdin := extern_var("file.stdin");

put_word := def(self, str)(error) {
    i := 0;
    while(i < str.length) {
        {} <- self.putc(str.at(i));
        if(error) {
            return;
        }
        i += 1;
    }
};
puts := def(self, str)(error) {
    {} <- put_word(self, str);
    self.putc('\n');
};
gets := def(self)(ret, error) {
    list := object() <- load("./list.bn");
    buf := list.new();
    while(1) {
        {} <- self.getc();
        if(error || ret == '\n') {
            break;
        }
        buf.append(ret);
    }
    ret := string(buf.toArray());
};

_inject := def(f)() {
    f.put_word := put_word;
    f.putc := putc;
    f.puts := puts;
    f.getc := getc;
    f.gets := gets;
    f.close := close;
};

_inject(stdout);
_inject(stderr);
_inject(stdin);

open := def(path, mode)(ret, error) {
    {} <- _open(path, mode);
    if(error) {
        return;
    }
    _inject(ret);
};